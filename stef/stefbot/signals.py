from django.db.models.signals import post_save
from django.dispatch import receiver
from django.conf import settings
from .models import Order, ModelPhoto
import asyncio
import threading
import logging
import os
from telegram import InputMediaPhoto
from .utils import send_telegram_message, bot  # –ò—Å–ø–æ–ª—å–∑—É–µ–º `bot` –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π event loop –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
loop = asyncio.new_event_loop()
threading.Thread(target=loop.run_forever, daemon=True).start()

def get_local_photo_path(photo):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    if not photo:
        return None
    return os.path.join(settings.MEDIA_ROOT, str(photo))  # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

async def send_order_confirmation(telegram_id, message, photo_paths):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ (–≤—Å–µ —Å—Ä–∞–∑—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)."""
    try:
        await send_telegram_message(telegram_id, message)

        media_group = []
        for photo_path in photo_paths:
            if os.path.exists(photo_path):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                with open(photo_path, "rb") as photo_file:
                    media_group.append(InputMediaPhoto(media=photo_file.read()))
            else:
                logger.warning(f"‚ùå –§–∞–π–ª {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        if media_group:
            await bot.send_media_group(chat_id=telegram_id, media=media_group)
        else:
            logger.warning("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

@receiver(post_save, sender=Order)
def notify_user_on_payment(sender, instance, created, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –∏ —Ñ–æ—Ç–æ –∑–∞–∫–∞–∑–∞."""
    if instance.status == 'paid' and not created:
        telegram_user = instance.user
        message = f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ {instance.id} –±—ã–ª –æ–ø–ª–∞—á–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–∏–∂–µ:"

        logger.info(f"üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_user.telegram_id}")

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏ –∏ –∏—Ö –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
        photos = ModelPhoto.objects.filter(model=instance.model)
        photo_paths = [get_local_photo_path(photo.photo.name) for photo in photos if photo.photo]

        if not photo_paths:
            logger.warning(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {instance.id}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–æ–≤–æ–º event loop
        asyncio.run_coroutine_threadsafe(
            send_order_confirmation(telegram_user.telegram_id, message, photo_paths), loop
        )
