import os
import sys
import django
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from asgiref.sync import sync_to_async

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(BASE_DIR)
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'stef.settings')
django.setup()

from stefbot.models import TelegramUser, ModelProfile, Order

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = ""
DEFAULT_PHOTO_URL = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-vVoi9lNzf3WaVV2cAHQSFcBqQtZu4pPWaw&s"

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
@sync_to_async
def get_or_create_user(telegram_id, username):
    return TelegramUser.objects.get_or_create(
        telegram_id=telegram_id,
        defaults={'username': username}
    )

@sync_to_async
def get_all_models():
    return list(ModelProfile.objects.all())

@sync_to_async
def get_model_by_id(model_id):
    return ModelProfile.objects.filter(id=model_id).first()

@sync_to_async
def get_model_photos(model_id):
    model = ModelProfile.objects.filter(id=model_id).first()
    return list(model.photos.all()) if model else []

@sync_to_async
def get_user_orders(telegram_id):
    return list(Order.objects.filter(user__telegram_id=telegram_id, status='paid'))

@sync_to_async
def create_order(user, model, amount):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    return Order.objects.create(
        user=user,
        model=model,
        amount=amount,
        status='pending'
    )

@sync_to_async
def get_order_by_id(order_id):
    return Order.objects.filter(id=order_id).first()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì∏ –ú–æ–¥–µ–ª–∏", callback_data='models')],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
        [InlineKeyboardButton("üîß –¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞", url='https://t.me/tech_support_bot')],
        [InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑—ã", callback_data='orders')]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user, _ = await get_or_create_user(update.effective_user.id, update.effective_user.username)
    await update.message.reply_photo(
        photo=DEFAULT_PHOTO_URL,
        caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ üîû",
        reply_markup=main_menu()
    )

@sync_to_async
def get_order_details(order_id):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–º–æ–¥–µ–ª—å –∏ —Å—É–º–º—É)"""
    order = Order.objects.filter(id=order_id).select_related('model').first()
    if order:
        return {
            "id": order.id,
            "model_name": order.model.name,
            "amount": order.amount
        }
    return None

async def handle_confirm_payment(query: Update, order_id: int, context: ContextTypes.DEFAULT_TYPE):
    try:
        order_details = await get_order_details(order_id)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

        if not order_details:
            await query.answer("‚ö†Ô∏è –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        admin_chat_id = ""  # –£–∫–∞–∂–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = query.from_user
        admin_message = (
            f"üÜï –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username} (ID: {user.id})\n"
            f"–ó–∞–∫–∞–∑ ID: {order_details['id']}\n"
            f"–ú–æ–¥–µ–ª—å: {order_details['model_name']}\n"
            f"–°—É–º–º–∞: {order_details['amount']} RUB\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç–µ–∂ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(chat_id=admin_chat_id, text=admin_message)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await query.answer(
            "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.",
            show_alert=True
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_payment: {e}")
        await query.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            show_alert=True
        )
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    try:
        if data == 'models':
            await handle_models_list(query)
        elif data.startswith('model_'):
            model_id = int(data.split('_')[1])
            await handle_model_details(query, model_id)
        elif data == 'back_to_main':
            await handle_back_to_main(query)
        elif data.startswith('buy_'):
            model_id = int(data.split('_')[1])
            await handle_purchase(query, model_id, context)
        elif data == 'orders':
            await handle_orders(query)
        elif data.startswith('confirm_payment_'):
            order_id = int(data.split('_')[2])
            await handle_confirm_payment(query, order_id, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await query.edit_message_caption(
            caption="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )

async def handle_models_list(query):
    models = await get_all_models()

    if not models:
        await query.edit_message_caption(
            caption="üòî –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
            reply_markup=main_menu()
        )
        return

    buttons = [[InlineKeyboardButton(m.name, callback_data=f'model_{m.id}')] for m in models]
    buttons.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])

    await query.edit_message_media(
        media=InputMediaPhoto(media=DEFAULT_PHOTO_URL, caption="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:"),
        reply_markup=InlineKeyboardMarkup(buttons)
    )

async def handle_model_details(query, model_id):
    model = await get_model_by_id(model_id)

    if not model:
        await query.edit_message_caption(
            caption="‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=main_menu()
        )
        return

    buttons = [
        [InlineKeyboardButton("üõí –ö—É–ø–∏—Ç—å", callback_data=f'buy_{model.id}')],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='models')]
    ]

    try:
        with open(model.preview_photo.path, 'rb') as photo_file:
            await query.message.reply_photo(
                photo=photo_file,
                caption=f"üî• {model.name}\n\n{model.description}\n\nüíµ –¶–µ–Ω–∞: {model.price} RUB",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
    except FileNotFoundError:
        await query.edit_message_caption(
            caption="‚ö†Ô∏è –§–æ—Ç–æ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            reply_markup=main_menu()
        )

async def handle_back_to_main(query):
    await query.edit_message_media(
        media=InputMediaPhoto(media=DEFAULT_PHOTO_URL, caption="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        reply_markup=main_menu()
    )

async def handle_purchase(query, model_id, context):
    model = await get_model_by_id(model_id)
    if model:
        user, _ = await get_or_create_user(query.from_user.id, query.from_user.username)
        order = await create_order(user, model, model.price)
        
        message = (
            f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {model.name}\n\n"
            f"üíµ **–¶–µ–Ω–∞**: {model.price} RUB\n\n"
            "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:\n\n"
            "üí∞ **–°–ë–ü**: +79991234567\n"
            "üí≥ **–ö–∞—Ä—Ç–∞**: 4276 1234 5678 9012\n\n"
            "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –û–ø–ª–∞—Ç–∏–ª'."
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f'confirm_payment_{order.id}')],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f'model_{model.id}')],
        ]
        
        await query.edit_message_caption(
            caption=message,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await query.edit_message_caption(
            caption="‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
            reply_markup=main_menu()
        )

async def handle_orders(query):
    user_id = query.from_user.id
    orders = await get_user_orders(user_id)
    
    if not orders:
        await query.edit_message_caption(
            caption="üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.",
            reply_markup=main_menu()
        )
        return
    
    for order in orders:
        photos = await get_model_photos(order.model.id)
        if photos:
            media_group = [InputMediaPhoto(media=photo.photo.url) for photo in photos]
            await query.message.reply_media_group(media=media_group)
        await query.message.reply_text(
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ {order.model.name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!",
            reply_markup=main_menu()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    application = Application.builder().token(TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    application.run_polling()
